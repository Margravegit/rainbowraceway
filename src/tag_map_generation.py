import introspect

def generateFileHeader():
    # import_statements =""
    # for module in import_list:
    #     import_statements += "import %s \n"%(module)

    dict_definitions = ""
    for d in getMapNames():
        dict_definitions += d+" = dict()\n"

    return """# This is an autogenerated file. Do not edit manually unless you are feeling adventurous
from dynamic_types import *
%s
"""%(dict_definitions)

def writeback(file, admin_tags,race_tags):

    f = open(file, "w")

    f.write(generateFileHeader()) #map(lambda x: str(x.func.__module__),values.items())))

    for k, v in admin_tags.items():
        f.write("%s[\'%s\']=%s\n" % ("admin_tags",k,v.__name__))
    f.write("\n")
    for k, v in race_tags.items():
        f.write("%s[\'%s\']=%s\n" % ("race_tags", k, v.__name__))
        # f.write("admin_tags[\'%s\']=%s\n" % (k, v.__module__ + "." + v.__name__))
    f.close()

def getMapNames():
    return ["admin_tags","race_tags"]
#
# def generateTypeActionMap():
#     import admin_behaviours
#     introspect.verifyObjAssociationSanity((admin_behaviours))
#     p = introspect.getAssociatedObjects(admin_behaviours)
#     d = {}
#     for k,f,v in p:
#         d[v] = f
#     print(d)


if __name__ == "__main__":

    # import admin_tags
    # import dynamic_types
    # admin_tags.admin_tags["AFFaFFasdasda"] = dynamic_types.banana
    # admin_tags.race_tags["22AFFaFFasdasda"] = dynamic_types.blue
    # writeback("admin_tags.py",admin_tags.admin_tags,admin_tags.race_tags)

    # generateTypeActionMap()
    pass